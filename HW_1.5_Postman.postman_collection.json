{
	"info": {
		"_postman_id": "0d94efa8-1dfb-472b-9e43-be275dd160a0",
		"name": "HW_1.5_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "02_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData.family.children[0])\r",
							"\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"//var name = pm.environment.get(\"name\");\r",
							"//pm.test(\"name\", function () {\r",
							"        //pm.expect(jsonData.name).to.eql(name)\r",
							"        //console.log(jsonData.name, \"=\", name);\r",
							"//});\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(\"Svetlana\")\r",
							"    console.log(jsonData.name, \"=\", \"Svetlana\");\r",
							"});\r",
							"\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"        pm.expect(+jsonData.age).to.eql(42)\r",
							"    console.log(+jsonData.age, \"=\", 42);\r",
							"});\r",
							"\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary\", function () {\r",
							"        pm.expect(jsonData.salary).to.eql(5000)\r",
							"    console.log(jsonData.salary, \"=\", 5000);\r",
							"});\r",
							"\r",
							"\r",
							"//7. Спарсить request.\r",
							"var request = request.data\r",
							"console.log(request.name);\r",
							"\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name_req\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(request.name);\r",
							"        console.log(jsonData.name, \"=\", request.name);\r",
							"});\r",
							"\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age_req\", function () {\r",
							"        pm.expect(jsonData.age).to.eql(request.age);\r",
							"        console.log(jsonData.age, \"=\", request.age);\r",
							"});\r",
							"\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary_req\", function () {\r",
							"        pm.expect(jsonData.salary).to.eql(+request.salary);\r",
							"        console.log(jsonData.salary, \"=\", +request.salary);\r",
							"});\r",
							"\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salary*4\", function () {\r",
							"        pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+request.salary*4);\r",
							"        console.log(jsonData.family.u_salary_1_5_year, \"=\", +request.salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Svetlana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "42",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "03_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"//4. Спарсить request.\r",
							"var request = pm.request.url.query.toObject();\r",
							"console.log(request.name)\r",
							"\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name_req\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.name)\r",
							"    console.log(jsonData.name, \"=\", request.name);\r",
							"});\r",
							"\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age_req\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.age)\r",
							"    console.log(jsonData.age, \"=\", request.age);\r",
							"});\r",
							"\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary_req\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+request.salary)\r",
							"    console.log(jsonData.salary, \"=\", +request.salary);\r",
							"});\r",
							"\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"console.log(jsonData.family.pets.dog.name)\r",
							"console.log(jsonData.family.pets.dog.age)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog has name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"    console.log(jsonData.family.pets.dog.name)\r",
							"});\r",
							"\r",
							"//pm.expect(notificationSettings.detail).to.include(\"sms\");\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog has age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"    console.log(jsonData.family.pets.dog.age);\r",
							"});\r",
							"\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog has name Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"    console.log(jsonData.family.pets.dog.name)\r",
							"});\r",
							"\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение \r",
							"pm.test(\"dog has age 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"    console.log(jsonData.family.pets.dog.age)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Svetlana&age=42&salary=5000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Svetlana"
						},
						{
							"key": "age",
							"value": "42"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "04_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//4.  Спарсить request.\r",
							"var request = pm.request.url.query.toObject();\r",
							"console.log(request.name)\r",
							"//var request = pm.request.url.query.all();\r",
							"//console.log(pm.request.url.query.all)\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name_req\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(request.name)\r",
							"    console.log(jsonData.name, \"=\", request.name)\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age_req\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+request.age)\r",
							"    console.log(jsonData.age, \"=\", +request.age)\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(request.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"jsonData.salary[0] = request.salary\", function (){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+request.salary)\r",
							"    console.log(jsonData.salary[0], \"=\", +request.salary)\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"jsonData.salary[1] = request.salary\", function (){\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(request.salary*2)\r",
							"    console.log(+jsonData.salary[1], \"=\", request.salary*2)\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"jsonData.salary[2] = request.salary\", function (){\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(request.salary*3)\r",
							"    console.log(+jsonData.salary[2], \"=\", request.salary*3)\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", pm.response.json().name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", pm.response.json().age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary[0]\", pm.response.json().salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < jsonData.salary.length; i++) {\r",
							"    console.log(jsonData.salary[i]);\r",
							"}\r",
							"\r",
							"//let array = [1,2,3,4,5]\r",
							"//for (let i of array){\r",
							"    //console.log(\"item_array = \", i);\r",
							"//}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Svetlana&age=42&salary=5000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Svetlana"
						},
						{
							"key": "age",
							"value": "42"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "05_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр salary из окружения в age\r",
							"//3. Вставить параметр salary из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"//var request = pm.request.url.query.toString();\r",
							"//var request = pm.request.url.query.toObject();\r",
							"//var request = request.data;\r",
							"//var request = request.body;\r",
							"\r",
							"var request = request.data;\r",
							"//console.log(request.name)\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json responce has param start_qa_salary\", function (){\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"    console.log(\"start_qa_salary--\", jsonData.start_qa_salary)\r",
							"});\r",
							"\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json responce has param qa_salary_after_6_months\", function (){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"    console.log(\"qa_salary_after_6_months--\", jsonData.qa_salary_after_6_months)\r",
							"});\r",
							"\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json responce has param qa_salary_after_12_months\", function (){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"    console.log(\"qa_salary_after_12_months--\", jsonData.qa_salary_after_12_months)\r",
							"    console.log(typeof jsonData.qa_salary_after_12_months)\r",
							"    });\r",
							"\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json responce has param qa_salary_after_1.5_year\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"    //console.log(typeof jsonData.qa_salary_after_1.5_year)\r",
							"    console.log(\"qa_salary_after_1.5_year--\", jsonData['qa_salary_after_1.5_year'])\r",
							"   \r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json responce has param qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"    console.log(\"qa_salary_after_3.5_years--\", jsonData[\"qa_salary_after_3.5_years\"])\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"console.log(jsonData.person)\r",
							"//console.log('error', error)\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary  = salary из request\", () => {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+request.salary)\r",
							"    console.log(jsonData.start_qa_salary,\"=\", +request.salary)\r",
							"});\r",
							"\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months  = salary*2\", () => {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+request.salary*2)\r",
							"    console.log(jsonData.qa_salary_after_6_months, \"=\", +request.salary*2)\r",
							"});\r",
							"\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months  = salary*2.7\", () => {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+request.salary*2.7)\r",
							"    console.log(jsonData.qa_salary_after_12_months, \"=\", +request.salary*2.7)\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year  = salary*3.3\", () => {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(+request.salary*3.3)\r",
							"    console.log(jsonData['qa_salary_after_1.5_year'], \"=\", +request.salary*3.3)\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years  = salary*3.8\", () => {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(+request.salary*3.8)\r",
							"    console.log(jsonData['qa_salary_after_3.5_years'], \"=\", +request.salary*3.8)\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1]  = salary\", () => {\r",
							"    pm.expect(jsonData.person[\"u_name\"][1]).to.eql(+request.salary)\r",
							"    console.log(jsonData.person[\"u_name\"][1], \"=\", +request.salary)\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person.u_age  = age\", () => {\r",
							"    pm.expect(jsonData.person[\"u_age\"]).to.eql(+request.age)\r",
							"    console.log(jsonData.person[\"u_age\"], \"=\", +request.age)\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"person.u_salary_5_years  = salary*4.2\", () => {\r",
							"    pm.expect(jsonData.person[\"u_salary_5_years\"]).to.eql(+request.salary*4.2)\r",
							"    console.log(jsonData.person[\"u_salary_5_years\"], \"=\", +request.salary*4.2)\r",
							"});\r",
							"\r",
							"\r",
							"//22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in jsonData.person) {\r",
							"    console.log (jsonData.person[i])\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}